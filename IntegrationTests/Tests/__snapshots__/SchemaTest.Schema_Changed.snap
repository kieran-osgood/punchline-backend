schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type BugReport {
  id: ID!
  description: String!
  reportingUser: User!
}

"A connection to a list of items."
type CategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [Category!]
  totalCount: Int!
}

"An edge in a connection."
type CategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Category!
}

type Category implements Node {
  id: ID!
  name: String!
  image: String
  users: [User!]!
  joke: Joke!
  jokes: [Joke!]!
}

type Joke implements Node {
  id: ID!
  title: String!
  body: String!
  positiveRating: Int!
  negativeRating: Int!
  skipRating: Int!
  reportCount: Int!
  explicitContent: Boolean!
  length: JokeLength!
  userJokeHistories: [UserJokeHistory!]!
  users: [User!]!
  jokeReports: [JokeReport!]!
  categories: [Category!]!
}

type JokeReport {
  id: ID!
  description: String!
  createdAt: DateTime!
  reportedJoke: Joke!
  reportingUser: User!
}

"A connection to a list of items."
type JokesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [JokesEdge!]
  "A flattened list of the nodes."
  nodes: [Joke!]
  totalCount: Int!
}

"An edge in a connection."
type JokesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Joke!
}

type MutateBugReportPayload {
  bugReport: BugReport
  errors: [UserError!]
}

type MutateJokeReportPayload {
  jokeReport: JokeReport
  errors: [UserError!]
}

type MutateUserJokeHistoryPayload {
  userJokeHistory: UserJokeHistory
  errors: [UserError!]
}

type Mutation {
  rateJoke(input: RateJokeInput!): MutateUserJokeHistoryPayload! @authorize(apply: BEFORE_RESOLVER)
  deleteUserJokeHistory(id: ID!): MutateUserJokeHistoryPayload! @authorize(apply: BEFORE_RESOLVER)
  updateUserJokeHistory(input: UpdateBookmarkInput!): MutateUserJokeHistoryPayload! @authorize(apply: BEFORE_RESOLVER)
  addJokeReport(input: JokeReportInput!): MutateJokeReportPayload! @authorize(apply: BEFORE_RESOLVER)
  addBugReport(input: BugReportInput!): MutateBugReportPayload! @authorize(apply: BEFORE_RESOLVER)
  login(input: UserLoginInput!): UserPayload!
  completeOnboarding: UserPayload! @authorize(apply: BEFORE_RESOLVER)
  deleteUser: Boolean! @authorize(apply: BEFORE_RESOLVER)
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  jokes(input: JokeQueryInput! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: JokeFilterInput order: [JokeSortInput!]): JokesConnection @authorize(apply: BEFORE_RESOLVER)
  categories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CategoryFilterInput order: [CategorySortInput!]): CategoriesConnection @authorize(apply: BEFORE_RESOLVER)
  userCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CategoryFilterInput order: [CategorySortInput!]): UserCategoriesConnection @authorize(apply: BEFORE_RESOLVER)
  userJokeHistoryByUserId("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UserJokeHistoryFilterInput order: [UserJokeHistorySortInput!]): UserJokeHistoryByUserIdConnection @authorize(apply: BEFORE_RESOLVER)
}

type User implements Node {
  id: ID!
  firebaseUid: String!
  jokeCount: Int!
  name: String!
  createdOn: DateTime!
  lastLogin: DateTime!
  onboardingComplete: Boolean!
  userJokeHistories: [UserJokeHistory!]!
  jokes: [Joke!]!
  jokeReports: [JokeReport!]!
  categories: [Category!]!
}

"A connection to a list of items."
type UserCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [Category!]
  totalCount: Int!
}

"An edge in a connection."
type UserCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Category!
}

type UserError {
  code: ErrorCodes!
  message: String!
}

type UserJokeHistory implements Node {
  id: ID!
  bookmarked: Boolean!
  rating: RatingValue!
  createdAt: DateTime!
  joke: Joke!
  user: User!
}

"A connection to a list of items."
type UserJokeHistoryByUserIdConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserJokeHistoryByUserIdEdge!]
  "A flattened list of the nodes."
  nodes: [UserJokeHistory!]
  totalCount: Int!
}

"An edge in a connection."
type UserJokeHistoryByUserIdEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserJokeHistory!
}

type UserPayload {
  user: User
  errors: [UserError!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input BugReportInput {
  description: String!
}

input CategoryFilterInput {
  and: [CategoryFilterInput!]
  or: [CategoryFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  image: StringOperationFilterInput
  jokes: ListFilterInputTypeOfJokeFilterInput
  users: ListFilterInputTypeOfUserFilterInput
  joke: JokeFilterInput
}

input CategorySortInput {
  id: SortEnumType
  name: SortEnumType
  image: SortEnumType
  joke: JokeSortInput
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input JokeFilterInput {
  and: [JokeFilterInput!]
  or: [JokeFilterInput!]
  id: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  body: StringOperationFilterInput
  positiveRating: ComparableInt32OperationFilterInput
  negativeRating: ComparableInt32OperationFilterInput
  skipRating: ComparableInt32OperationFilterInput
  reportCount: ComparableInt32OperationFilterInput
  explicitContent: BooleanOperationFilterInput
  length: JokeLengthOperationFilterInput
  userJokeHistories: ListFilterInputTypeOfUserJokeHistoryFilterInput
  categories: ListFilterInputTypeOfCategoryFilterInput
  users: ListFilterInputTypeOfUserFilterInput
  jokeReports: ListFilterInputTypeOfJokeReportFilterInput
}

input JokeLengthOperationFilterInput {
  eq: JokeLength
  neq: JokeLength
  in: [JokeLength!]
  nin: [JokeLength!]
}

input JokeQueryInput {
  deepLinkedJokeId: ID
  blockedCategoryIds: [ID!]
  jokeLengths: [JokeLength!]!
  profanityFilter: Boolean! = true
}

input JokeReportFilterInput {
  and: [JokeReportFilterInput!]
  or: [JokeReportFilterInput!]
  id: IdOperationFilterInput
  description: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  reportedJoke: JokeFilterInput
  reportingUser: UserFilterInput
}

input JokeReportInput {
  id: ID!
  description: String!
}

input JokeSortInput {
  id: SortEnumType
  title: SortEnumType
  body: SortEnumType
  positiveRating: SortEnumType
  negativeRating: SortEnumType
  skipRating: SortEnumType
  reportCount: SortEnumType
  explicitContent: SortEnumType
  length: SortEnumType
}

input ListFilterInputTypeOfCategoryFilterInput {
  all: CategoryFilterInput
  none: CategoryFilterInput
  some: CategoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJokeFilterInput {
  all: JokeFilterInput
  none: JokeFilterInput
  some: JokeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJokeReportFilterInput {
  all: JokeReportFilterInput
  none: JokeReportFilterInput
  some: JokeReportFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserJokeHistoryFilterInput {
  all: UserJokeHistoryFilterInput
  none: UserJokeHistoryFilterInput
  some: UserJokeHistoryFilterInput
  any: Boolean
}

input RateJokeInput {
  jokeId: ID!
  rating: RatingValue!
  bookmarked: Boolean! = false
}

input RatingValueOperationFilterInput {
  eq: RatingValue
  neq: RatingValue
  in: [RatingValue!]
  nin: [RatingValue!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UpdateBookmarkInput {
  id: ID!
  rating: RatingValue
  bookmarked: Boolean = false
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: ComparableInt32OperationFilterInput
  firebaseUid: StringOperationFilterInput
  jokeCount: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  createdOn: ComparableDateTimeOperationFilterInput
  lastLogin: ComparableDateTimeOperationFilterInput
  onboardingComplete: BooleanOperationFilterInput
  userJokeHistories: ListFilterInputTypeOfUserJokeHistoryFilterInput
  categories: ListFilterInputTypeOfCategoryFilterInput
  jokes: ListFilterInputTypeOfJokeFilterInput
  jokeReports: ListFilterInputTypeOfJokeReportFilterInput
}

input UserJokeHistoryFilterInput {
  and: [UserJokeHistoryFilterInput!]
  or: [UserJokeHistoryFilterInput!]
  id: ComparableInt32OperationFilterInput
  bookmarked: BooleanOperationFilterInput
  rating: RatingValueOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  user: UserFilterInput
  joke: JokeFilterInput
}

input UserJokeHistorySortInput {
  id: SortEnumType
  bookmarked: SortEnumType
  rating: SortEnumType
  createdAt: SortEnumType
  user: UserSortInput
  joke: JokeSortInput
}

input UserLoginInput {
  firebaseUid: String!
  username: String!
}

input UserSortInput {
  id: SortEnumType
  firebaseUid: SortEnumType
  jokeCount: SortEnumType
  name: SortEnumType
  createdOn: SortEnumType
  lastLogin: SortEnumType
  onboardingComplete: SortEnumType
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

enum ErrorCodes {
  SERVER_ERROR
  DUPLICATE_ENTRY
  RESOURCE_NOT_FOUND
  NOT_AUTHORIZED
}

enum JokeLength {
  SMALL
  MEDIUM
  LARGE
}

enum RatingValue {
  SKIP
  GOOD
  REPORTED
  BAD
}

enum SortEnumType {
  ASC
  DESC
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")
