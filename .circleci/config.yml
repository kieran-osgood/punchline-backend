version: 2.1

orbs:
     win: circleci/windows@2.2.0
     aws-cli: circleci/aws-cli@2.0.3
     aws-ecr: circleci/aws-ecr@7.2.0
     aws-ecs: circleci/aws-ecs@02.2.1

commands:
  aws_decrypt:
    parameters:
      aws_access_key_id:
        type: env_var_name
        default: AWS_ACCESS_KEY_ID
      aws_secret_access_key:
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
      input_file_path:
        type: string
      output_file_path:
        type: string
      sops_release_url:
        type: string
        default: https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux
    steps:
      - run:
          name: download SOPS
          command: >
            curl -Lo sops
            << parameters.sops_release_url >>
            \
              && chmod +x sops
            sudo cp sops /usr/local/bin && rm sops
      - run:
          name: decrypt resource
          command: |
            AWS_PROFILE=$AWS_CREDENTIAL_PROFILE sops -d << parameters.input_file_path >> > << parameters.output_file_path >>
jobs:
     decrypt-secrets:
          docker:
               - image: buildpack-deps:trusty
          steps:
          - attach_workspace:
               at: .
          - checkout
          - aws-cli/setup:
               profile-name: iamadmin-punchline
               version: 2.1.29
          - aws_decrypt:
               aws_access_key_id: AWS_ACCESS_KEY_ID
               aws_secret_access_key: AWS_SECRET_ACCESS_KEY
               input_file_path: "~/project/GraphQL/firebase-admin-sdk.encrypted.json"
               output_file_path: "~/project/GraphQL/firebase-admin-sdk.json"
          - persist_to_workspace:
               paths: .
               root: .
     build-test-push:
          docker:
               - image: buildpack-deps:trusty
          steps:
               - attach_workspace:
                    at: .
               - run: 
                    name: install dotnet-microsoft signing keys
                    command: |
                         sudo apt-get update; \
                         sudo apt-get install -y apt-transport-https && \
                         wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb 
                         sudo dpkg -i packages-microsoft-prod.deb
                         rm packages-microsoft-prod.deb
               - run:
                    name: install dotnet-sdk
                    command: |
                         sudo apt-get update && \
                         sudo apt-get install -y dotnet-sdk-5.0
               # - run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
               # - run: docker build -t punchline-backend-image .
               # - run: docker run -it --rm -p 5000:80 --name punchline-backend-container punchline-backend-image
               # - run: docker tag punchline-backend-container:latest 345637428723.dkr.ecr.us-east-1.amazonaws.com/punchline-backend:latest
               # - run: docker push 345637428723.dkr.ecr.us-east-1.amazonaws.com/punchline-backend-container:latest
               - aws-cli/setup:
                    profile-name: iamadmin-punchline
                    # version: 2.1.29
               # - run: docker login -u AWS --password $(AWS_PROFILE=iamadmin-punchline aws ecr get-login-password --region us-east-1) 345637428723.dkr.ecr.us-east-1.amazonaws.com
               - run:
                    name: Build the container
                    command: dotnet build -c Release
               - run:
                    name: Test the container
                    command: dotnet test -c Release
               - persist_to_workspace:
                    paths: .
                    root: .

# WorkFlows
workflows:
     # Only runs on the develop branch 
     build_and_test:
          jobs: 
               - decrypt-secrets
               - build-test-push:
                    requires:
                         - decrypt-secrets
               - aws-ecr/build-image:
                    repo: "${AWS_RESOURCE_NAME_PREFIX}"
                    tag: "${CIRCLE_SHA1}"
                    requires:
                      - build-test-push
               - aws-ecr/push-image:
                    repo: "${AWS_RESOURCE_NAME_PREFIX}"
                    tag: "${CIRCLE_SHA1}"
                    requires:
                      - build-test-push
               - aws-ecs/deploy-service-update:
                    requires:
                    - build-test-push # only run this job once aws-ecr/build-and-push-image has completed
                    family: "${AWS_RESOURCE_NAME_PREFIX}-service"
                    cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
                    container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}"
















