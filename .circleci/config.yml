version: 2.1

orbs:
  win: circleci/windows@2.2.0
  aws-cli: circleci/aws-cli@2.0.3

commands:
  aws_decrypt:
    parameters:
      aws_access_key_id:
        type: env_var_name
        default: AWS_ACCESS_KEY_ID
      aws_secret_access_key:
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
      input_file_path:
        type: string
      output_file_path:
        type: string
      sops_release_url:
        type: string
        default: https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux
    steps:
      - run:
          name: download SOPS
          command: >
            curl -Lo sops
            << parameters.sops_release_url >>
            \
              && chmod +x sops
            sudo cp sops /usr/local/bin && rm sops
      - run:
          name: decrypt resource
          command: |
            AWS_PROFILE=$AWS_CREDENTIAL_PROFILE sops -d << parameters.input_file_path >> > << parameters.output_file_path >>
  transfer_secrets:
    steps:
      - run: cp -a ~/project/decrypted-files/. ~/project/GraphQL
  install_microsoft_dotnet_signing_keys:
    steps:
      - run:
          name: Install dotnet-microsoft signing keys
          command: |
            sudo apt-get update; \
            sudo apt-get install -y apt-transport-https && \
            wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb 
            sudo dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
  install_dotnet_6:
    steps:
      - run:
          name: Install dotnet-sdk
          command: |
            sudo apt-get update && \
            sudo apt-get install -y dotnet-sdk-6.0
  install_dotnet_tools:
    steps:
      - run:
          name: Install Dotnet Lambda Tools
          command: |
            dotnet tool install -g trx2junit
            dotnet tool install -g Amazon.Lambda.Tools
  export_dotnet_tools_path:
    steps:
      - run:
          name: Export Dotnet Tools Path
          command: export PATH="$PATH:/root/.dotnet/tools/"
jobs:
  decrypt-secrets:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - attach_workspace:
          at: .
      - checkout
      - aws-cli/setup:
          profile-name: iamadmin-punchline
          version: 2.1.29
      - run: mkdir ~/project/decrypted-files
      - aws_decrypt:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          input_file_path: "~/project/GraphQL/encrypted.firebase-admin-sdk.json"
          output_file_path: "~/project/decrypted-files/firebase-admin-sdk.json"
      - aws_decrypt:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          input_file_path: "~/project/GraphQL/encrypted.appsettings.Production.json"
          output_file_path: "~/project/decrypted-files/appsettings.Production.json"
      - transfer_secrets
      - persist_to_workspace:
          paths: .
          root: .

  dotnet-build-and-test:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - attach_workspace:
          at: .
      - install_microsoft_dotnet_signing_keys
      - install_dotnet_6
      - run:
          name: Build
          command: |
            dotnet build -c Release
      - run:
          name: Unit Tests
          command: 
            dotnet test -c Release --no-build --logger "trx"
      - install_dotnet_tools
      - run:
          name: Convert test results to .trx 
          when: always
          command: |
            export PATH="$PATH:/root/.dotnet/tools/"
            trx2junit IntegrationTests/TestResults/*.trx
      - store_test_results:
          path: IntegrationTests/TestResults
      - persist_to_workspace:
          paths: .
          root: .

  aws-lambda-deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - attach_workspace:
          at: .
      - install_microsoft_dotnet_signing_keys
      - install_dotnet_6
      - install_dotnet_tools
      - run:
          name: Build and Deploy to AWS
          command: |
            export PATH="$PATH:/root/.dotnet/tools/"
            make deploy

# WorkFlows
workflows:
  # Only runs on the develop branch 
  build_and_test:
    jobs:
      - decrypt-secrets
      - dotnet-build-and-test:
          requires:
            - decrypt-secrets
      - aws-lambda-deploy:
          requires:
            - dotnet-build-and-test
          filters:
            branches:
              only:
                - master















